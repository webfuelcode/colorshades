<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Color Combination Maker ðŸŽ¨</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background: linear-gradient(135deg, #141e30, #243b55);
      color: #fff;
      min-height: 100vh;
    }
    .glass-box {
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      padding: 30px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.3);
    }
    .color-box {
      width: 120px;
      height: 120px;
      border-radius: 12px;
      margin: 8px auto;
      cursor: pointer;
      box-shadow: 0 4px 10px rgba(0,0,0,0.4);
      transition: transform 0.2s ease;
    }
    .color-box:hover {
      transform: scale(1.05);
    }
    .hex {
      margin-top: 8px;
      font-weight: 500;
    }
    .palette-btn {
      background: rgba(255,255,255,0.15);
      border: none;
      color: white;
      padding: 8px 16px;
      border-radius: 12px;
      margin: 5px;
      cursor: pointer;
      transition: 0.3s;
    }
    .palette-btn:hover {
      background: rgba(255,255,255,0.3);
    }
  </style>
</head>
<body>

  <div class="container text-center py-5">
    <div class="glass-box">
      <h1 class="mb-4">Color Combination Maker ðŸŽ¨</h1>

      <div class="mb-4">
        <input type="color" id="colorPicker" value="#3498db" class="form-control form-control-color" style="width:100px;height:60px;">
        <button id="generateBtn" class="btn btn-light mt-3">Generate Combination</button>
      </div>

      <h3>Matching Combinations</h3>
      <div id="combinationContainer" class="d-flex flex-wrap justify-content-center"></div>

      <h3 class="mt-5">Same Color Shades</h3>
      <div id="shadeContainer" class="d-flex flex-wrap justify-content-center"></div>
    </div>

    <div class="glass-box mt-5">
      <h3>Predefined Color Palettes</h3>
      <div id="paletteList" class="mt-3">
        <button class="palette-btn" data-color="#708238">Olive Green</button>
        <button class="palette-btn" data-color="#A8E6CF">Light Summer</button>
        <button class="palette-btn" data-color="#FFB6B9">Soft Pink</button>
        <button class="palette-btn" data-color="#6B5B95">Winter</button>
        <button class="palette-btn" data-color="#F7CAC9">Blush</button>
        <button class="palette-btn" data-color="#92A8D1">Cool Blue</button>
      </div>
    </div>
  </div>

  <script>
    const colorPicker = document.getElementById("colorPicker");
    const generateBtn = document.getElementById("generateBtn");
    const combinationContainer = document.getElementById("combinationContainer");
    const shadeContainer = document.getElementById("shadeContainer");
    const paletteList = document.getElementById("paletteList");

    generateBtn.addEventListener("click", () => {
      const baseColor = colorPicker.value;
      showCombinations(baseColor);
      showShades(baseColor);
    });

    paletteList.addEventListener("click", (e) => {
      if (e.target.classList.contains("palette-btn")) {
        const selectedColor = e.target.getAttribute("data-color");
        colorPicker.value = selectedColor;
        showCombinations(selectedColor);
        showShades(selectedColor);
      }
    });

    function showCombinations(baseColor) {
      combinationContainer.innerHTML = "";
      const combos = [
        lightenDarkenColor(baseColor, 40),
        lightenDarkenColor(baseColor, -40),
        adjustHue(baseColor, 60),
        adjustHue(baseColor, 120),
        adjustHue(baseColor, 180),
        adjustHue(baseColor, 240),
        adjustHue(baseColor, 300)
      ];
      combos.forEach(c => {
        const div = document.createElement("div");
        div.className = "text-center m-2";
        div.innerHTML = `<div class="color-box" style="background:${c}" onclick="copyColor('${c}')"></div><div class="hex">${c}</div>`;
        combinationContainer.appendChild(div);
      });
    }

    function showShades(baseColor) {
      shadeContainer.innerHTML = "";
      for (let i = -60; i <= 60; i += 30) {
        const shade = lightenDarkenColor(baseColor, i);
        const div = document.createElement("div");
        div.className = "text-center m-2";
        div.innerHTML = `<div class="color-box" style="background:${shade}" onclick="copyColor('${shade}')"></div><div class="hex">${shade}</div>`;
        shadeContainer.appendChild(div);
      }
    }

    function lightenDarkenColor(col, amt) {
      let usePound = false;
      if (col[0] === "#") {
        col = col.slice(1);
        usePound = true;
      }
      let num = parseInt(col, 16);
      let r = (num >> 16) + amt;
      let g = ((num >> 8) & 0x00FF) + amt;
      let b = (num & 0x0000FF) + amt;
      r = Math.min(255, Math.max(0, r));
      g = Math.min(255, Math.max(0, g));
      b = Math.min(255, Math.max(0, b));
      return (usePound ? "#" : "") + ((r << 16) | (g << 8) | b).toString(16).padStart(6, "0");
    }

    function adjustHue(hex, degree) {
      const hsl = hexToHSL(hex);
      hsl.h = (hsl.h + degree) % 360;
      return hslToHex(hsl);
    }

    function hexToHSL(H) {
      let r = 0, g = 0, b = 0;
      if (H.length === 4) {
        r = "0x" + H[1] + H[1];
        g = "0x" + H[2] + H[2];
        b = "0x" + H[3] + H[3];
      } else if (H.length === 7) {
        r = "0x" + H[1] + H[2];
        g = "0x" + H[3] + H[4];
        b = "0x" + H[5] + H[6];
      }
      r /= 255; g /= 255; b /= 255;
      const cmin = Math.min(r,g,b), cmax = Math.max(r,g,b), delta = cmax - cmin;
      let h = 0, s = 0, l = 0;
      if (delta === 0) h = 0;
      else if (cmax === r) h = ((g - b) / delta) % 6;
      else if (cmax === g) h = (b - r) / delta + 2;
      else h = (r - g) / delta + 4;
      h = Math.round(h * 60);
      if (h < 0) h += 360;
      l = (cmax + cmin) / 2;
      s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
      s = +(s * 100).toFixed(1);
      l = +(l * 100).toFixed(1);
      return { h, s, l };
    }

    function hslToHex(hsl) {
      const { h, s, l } = hsl;
      let s1 = s / 100;
      let l1 = l / 100;
      let c = (1 - Math.abs(2 * l1 - 1)) * s1;
      let x = c * (1 - Math.abs((h / 60) % 2 - 1));
      let m = l1 - c / 2;
      let r=0, g=0, b=0;
      if (0 <= h && h < 60) {r=c; g=x; b=0;}
      else if (60 <= h && h < 120) {r=x; g=c; b=0;}
      else if (120 <= h && h < 180) {r=0; g=c; b=x;}
      else if (180 <= h && h < 240) {r=0; g=x; b=c;}
      else if (240 <= h && h < 300) {r=x; g=0; b=c;}
      else if (300 <= h && h < 360) {r=c; g=0; b=x;}
      r = Math.round((r + m) * 255);
      g = Math.round((g + m) * 255);
      b = Math.round((b + m) * 255);
      return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    }

    function copyColor(hex) {
      navigator.clipboard.writeText(hex);
      alert(`Copied ${hex}`);
    }
  </script>

</body>
</html>
